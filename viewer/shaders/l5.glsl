
uniform vec2 screenSize;
uniform Image h;

vec4 effect(vec4 color, Image tex, vec2 texture_coords, vec2 screen_coords)
{
    vec2 sc = mod(screen_coords, screenSize);
    int ig = 16; // # of input channel groups
    vec2 is = vec2(screenSize.x * ig, screenSize.y); // input size
    vec2 o = vec2(screenSize.x, 0.0); // offset

	vec4 h0 = Texel(h, (sc + o * 0.0) / is);
	vec4 h1 = Texel(h, (sc + o * 1.0) / is);
	vec4 h2 = Texel(h, (sc + o * 2.0) / is);
	vec4 h3 = Texel(h, (sc + o * 3.0) / is);
	vec4 h4 = Texel(h, (sc + o * 4.0) / is);
	vec4 h5 = Texel(h, (sc + o * 5.0) / is);
	vec4 h6 = Texel(h, (sc + o * 6.0) / is);
	vec4 h7 = Texel(h, (sc + o * 7.0) / is);
	vec4 h8 = Texel(h, (sc + o * 8.0) / is);
	vec4 h9 = Texel(h, (sc + o * 9.0) / is);
	vec4 h10 = Texel(h, (sc + o * 10.0) / is);
	vec4 h11 = Texel(h, (sc + o * 11.0) / is);
	vec4 h12 = Texel(h, (sc + o * 12.0) / is);
	vec4 h13 = Texel(h, (sc + o * 13.0) / is);
	vec4 h14 = Texel(h, (sc + o * 14.0) / is);
	vec4 h15 = Texel(h, (sc + o * 15.0) / is);

    int channelGroup = int(screen_coords.x / screenSize.x);
    if (channelGroup == 0) {
		float c0 = h0[0]*(0.10254288)+h0[1]*(0.06390309)+h0[2]*(0.01282901)+h0[3]*(-0.02320015)+h1[0]*(0.02223261)+h1[1]*(-0.04256000)+h1[2]*(-0.01967385)+h1[3]*(0.06909462)+h2[0]*(-0.01878882)+h2[1]*(-0.07063411)+h2[2]*(-0.08264893)+h2[3]*(0.08149491)+h3[0]*(-0.11830178)+h3[1]*(-0.11640976)+h3[2]*(0.10111069)+h3[3]*(0.00154981)+h4[0]*(-0.07225239)+h4[1]*(0.06615227)+h4[2]*(0.06932107)+h4[3]*(-0.02086018)+h5[0]*(0.05747245)+h5[1]*(0.06113183)+h5[2]*(-0.01887695)+h5[3]*(-0.10832895)+h6[0]*(-0.08597332)+h6[1]*(0.00211869)+h6[2]*(-0.02532885)+h6[3]*(0.02353221)+h7[0]*(-0.01987082)+h7[1]*(0.04287351)+h7[2]*(-0.08702257)+h7[3]*(-0.04849417)+h8[0]*(0.09383780)+h8[1]*(0.00319882)+h8[2]*(0.05225393)+h8[3]*(0.04760328)+h9[0]*(-0.01092516)+h9[1]*(0.10500821)+h9[2]*(-0.08102933)+h9[3]*(0.09502458)+h10[0]*(-0.06388368)+h10[1]*(0.08427832)+h10[2]*(-0.00124567)+h10[3]*(0.06295975)+h11[0]*(0.03268524)+h11[1]*(-0.10188986)+h11[2]*(0.06773449)+h11[3]*(-0.07815263)+h12[0]*(0.07191782)+h12[1]*(0.08902582)+h12[2]*(0.01417427)+h12[3]*(-0.10312665)+h13[0]*(-0.00621085)+h13[1]*(-0.06656168)+h13[2]*(0.04566311)+h13[3]*(0.08544037)+h14[0]*(0.11910496)+h14[1]*(0.06865855)+h14[2]*(-0.10018735)+h14[3]*(-0.05141712)+h15[0]*(0.02880027)+h15[1]*(-0.00199282)+h15[2]*(-0.02214258)+h15[3]*(-0.09621263)+(-0.07703131);
		float c1 = h0[0]*(-0.08284479)+h0[1]*(0.03229780)+h0[2]*(-0.05831458)+h0[3]*(-0.06628418)+h1[0]*(0.00037375)+h1[1]*(-0.07303833)+h1[2]*(0.04510586)+h1[3]*(-0.10014781)+h2[0]*(0.11035692)+h2[1]*(0.07749856)+h2[2]*(-0.07889738)+h2[3]*(-0.10558677)+h3[0]*(0.06546517)+h3[1]*(-0.04417644)+h3[2]*(-0.06716718)+h3[3]*(-0.04372180)+h4[0]*(0.00680713)+h4[1]*(-0.01637977)+h4[2]*(-0.00487723)+h4[3]*(0.03942903)+h5[0]*(0.08224533)+h5[1]*(0.10056408)+h5[2]*(0.02259042)+h5[3]*(0.04945822)+h6[0]*(0.05989353)+h6[1]*(0.05695384)+h6[2]*(0.10290647)+h6[3]*(0.06057169)+h7[0]*(-0.05782009)+h7[1]*(-0.01513555)+h7[2]*(-0.02208896)+h7[3]*(-0.01151616)+h8[0]*(-0.10699919)+h8[1]*(-0.01353265)+h8[2]*(0.06854016)+h8[3]*(-0.10183738)+h9[0]*(0.02886085)+h9[1]*(-0.07003134)+h9[2]*(0.06895632)+h9[3]*(-0.08087084)+h10[0]*(0.06301370)+h10[1]*(0.03463155)+h10[2]*(-0.06678887)+h10[3]*(-0.00454955)+h11[0]*(-0.09257323)+h11[1]*(0.06610898)+h11[2]*(0.05900542)+h11[3]*(0.00484204)+h12[0]*(-0.00807958)+h12[1]*(0.02527601)+h12[2]*(-0.01022534)+h12[3]*(-0.03584124)+h13[0]*(0.01125281)+h13[1]*(0.08736493)+h13[2]*(-0.03959249)+h13[3]*(-0.01030848)+h14[0]*(0.05385821)+h14[1]*(-0.02925479)+h14[2]*(0.04500720)+h14[3]*(-0.07540276)+h15[0]*(-0.03324172)+h15[1]*(0.05150638)+h15[2]*(0.03906233)+h15[3]*(0.03517796)+(0.05313130);
		float c2 = h0[0]*(-0.10349591)+h0[1]*(0.01244699)+h0[2]*(0.07423451)+h0[3]*(-0.09485423)+h1[0]*(0.00375099)+h1[1]*(0.04883656)+h1[2]*(-0.02844570)+h1[3]*(0.08138102)+h2[0]*(-0.08619288)+h2[1]*(-0.06420919)+h2[2]*(-0.03260751)+h2[3]*(-0.06985352)+h3[0]*(-0.00050611)+h3[1]*(0.05770073)+h3[2]*(0.09740499)+h3[3]*(0.04971294)+h4[0]*(-0.09932838)+h4[1]*(0.03900927)+h4[2]*(-0.05878581)+h4[3]*(-0.07004788)+h5[0]*(-0.08202734)+h5[1]*(-0.10791668)+h5[2]*(-0.00395958)+h5[3]*(0.11131923)+h6[0]*(-0.00900114)+h6[1]*(0.07730828)+h6[2]*(0.06865221)+h6[3]*(0.05591862)+h7[0]*(0.01726172)+h7[1]*(0.01687964)+h7[2]*(-0.01818985)+h7[3]*(0.00189857)+h8[0]*(0.11424179)+h8[1]*(0.06658903)+h8[2]*(0.02802302)+h8[3]*(-0.03085326)+h9[0]*(0.01166918)+h9[1]*(0.05456386)+h9[2]*(0.03775638)+h9[3]*(-0.05611059)+h10[0]*(0.03271155)+h10[1]*(-0.01680039)+h10[2]*(-0.02582211)+h10[3]*(0.06113380)+h11[0]*(-0.01971398)+h11[1]*(-0.04086625)+h11[2]*(0.00622334)+h11[3]*(0.10857465)+h12[0]*(0.10501070)+h12[1]*(0.09297003)+h12[2]*(0.00443371)+h12[3]*(-0.02149576)+h13[0]*(0.05367071)+h13[1]*(0.04275401)+h13[2]*(-0.02718499)+h13[3]*(-0.07183165)+h14[0]*(-0.07147144)+h14[1]*(-0.04909270)+h14[2]*(0.09135491)+h14[3]*(-0.03407468)+h15[0]*(0.06910595)+h15[1]*(-0.00988504)+h15[2]*(-0.10264666)+h15[3]*(-0.08493160)+(0.09476104);
		float c3 = 1.0;
		return clamp(vec4(c0, c1, c2, c3), 0.0, 1.0);
    }
}
